import binarytree;

export {

  Program : (code : [Line]);
  Line    : (num : int, com : Command);
  Env     : (progCounter: [int], commandDB: Tree<string, Command>, kvDB: Tree<string, int> , origLineNums: [int]);

  Command ::= Assign, Print, IfElse, Iff, GoTo, NoOp;
  Exp     ::= Add, Sub, Neg, Mul, Div, Atom;
  Atom    ::= Num, Id;

  Assign  : (i: Id, e: Exp);
  Print   : (e : Exp);  
  IfElse  : (e: CExp, c1: Command, c2: Command);
  Iff      : (e: CExp, c: Command);
  GoTo    : (n: int); 

  Add     : (e1: Exp, e2: Exp);
  Sub     : (e1: Exp, e2: Exp);
  Mul     : (e1: Exp, e2: Exp);
  Div     : (e1: Exp, e2: Exp);
  Neg     : (a: Atom);
  CExp    : (e1: Exp, op: COp, e2: Exp);
  COp     : (val : string);
  Num     : (val : int);
  String  : (val : string);
  Id      : (val : string);
  NoOp    : ();

  _eval(e: Env) -> Env;
  mprintln(msg: string, m: Maybe) -> void;
  while(condition : () -> bool, action : () -> void) -> void 

}

_eval(env: Env) -> Env {
  command = getCommand(lookupTree(env.commandDB, i2s(env.progCounter[0])));
  execCommand(command, env);
}

execCommand(c: Command, env: Env) -> Env {
  switch (c : Command) {
    Assign(id, ex) : assign(id, ex, env);
    Print(ex) : {
      print(ex, env);
      Env(tail(env.progCounter), env.commandDB, env.kvDB, env.origLineNums);        
    }
    IfElse(con, tru, fls) : ifelse(con, tru, fls, env);
    Iff(con, com) : iff(con, com, env);
    GoTo(n) : {
      startLineNum = env.origLineNums[0];
      endLineNum = env.origLineNums[length(env.origLineNums)-1];
      step = endLineNum/length(env.origLineNums);      
      progCounterReset = range(n, endLineNum, step);
      Env(progCounterReset, env.commandDB, env.kvDB, env.origLineNums);
    }      
    NoOp() : env;    
  }
}

mprintln(msg: string, m: Maybe) -> void {
  switch (m : Maybe) {
    None(): println("No Match Found!");
    Some(v): println(msg + toString(v));
  }
}

getCommand(m: Maybe<Command>) -> Command {
  switch (m : Maybe<Command>) {
    None()  : NoOp();
    Some(v) : v;
  }
}

getVal(m: Maybe<int>) -> int {
  switch (m : Maybe<int>) {
    None() : -intMax;
    Some(v) : v;
  }
}

print(ex: Exp, env: Env) -> void {
  switch (ex : Exp) {
    Num(n)      : println("> " + i2s(n));
    Id(id)      : println("> " + i2s(getVal(lookupTree(env.kvDB, id))));   
    Add(e1, e2) : println("> " + i2s(add(e1, e2, env)));
    Sub(e1, e2) : println("> " + i2s(sub(e1, e2, env)));
    Mul(e1, e2) : println("> " + i2s(mul(e1, e2, env)));
    Div(e1, e2) : println("> " + i2s(div(e1, e2, env)));
    Neg(a)      : println("> " + i2s(neg(a, env)));
  }
}

assign(id: Id, ex: Exp, env: Env) -> Env {
  switch (ex : Exp) {
    Num(n)      : {
      updatedkvDB = setTree(env.kvDB, id.val, n);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);        
    }
    Id(id2)     : {
      id2val = getVal(lookupTree(env.kvDB, id2));  
      updatedkvDB = setTree(env.kvDB, id.val, id2val);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);      
    }    
    Add(e1, e2) : {
      res = add(e1, e2, env);
      updatedkvDB = setTree(env.kvDB, id.val, res);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);  
    }
    Sub(e1, e2) : {
      res = sub(e1, e2, env);
      updatedkvDB = setTree(env.kvDB, id.val, res);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);       
    }
    Mul(e1, e2) : {
      res = mul(e1, e2, env);
      updatedkvDB = setTree(env.kvDB, id.val, res);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);       
    }
    Div(e1, e2) : {
      res = div(e1, e2, env);
      updatedkvDB = setTree(env.kvDB, id.val, res);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);       
    }
    Neg(a)      : {
      res = neg(a, env);
      updatedkvDB = setTree(env.kvDB, id.val, res);
      Env(tail(env.progCounter), env.commandDB, updatedkvDB, env.origLineNums);          
    }
  }
}

neg(a: Atom, env: Env) -> int {
  switch (a : Atom) {
    Id(i) : {
      ival  = getVal(lookupTree(env.kvDB, i));
      -ival;
    }
    Num(n) : -n;
  }
}

iff(c: CExp, tru: Command, env: Env) -> Env {
  comparisonOp = c.op.val;
  comparisonResult = 
  switch (c.e1 : Exp) {
    Id(i) : {
      lval  = getVal(lookupTree(env.kvDB, i));
      switch (c.e2 : Exp) {
        Id(ii) : {             
          rval = getVal(lookupTree(env.kvDB, ii));
          compare(comparisonOp, lval, rval)
        } 
        Num(nn) : {
          compare(comparisonOp, lval, nn); 
        }
        default : false;  
      } 
    }
    Num(n) : {
      switch (c.e2 : Exp) {
        Id(i) : {
          rval = getVal(lookupTree(env.kvDB, i));
          compare(comparisonOp, n, rval);
        }
        Num(nn) : compare(comparisonOp, n, nn);
        default : false;
      }
    }
    default : false;  
  }

  if (comparisonResult) {
    execCommand(tru, env);
  } else {
    Env(tail(env.progCounter), env.commandDB, env.kvDB, env.origLineNums);              
  }
}

ifelse(c: CExp, tru: Command, fls: Command, env: Env) -> Env {
  comparisonOp = c.op.val;
  comparisonResult = 
  switch (c.e1 : Exp) {
    Id(i) : {
      lval  = getVal(lookupTree(env.kvDB, i));
      switch (c.e2 : Exp) {
        Id(ii) : {             
          rval = getVal(lookupTree(env.kvDB, ii));
          compare(comparisonOp, lval, rval);
        } 
        Num(nn) : {
          compare(comparisonOp, lval, nn); 
        }
        default : false;  
      } 
    }
    Num(n) : {
      switch (c.e2 : Exp) {
        Id(i) : {
          rval = getVal(lookupTree(env.kvDB, i));
          compare(comparisonOp, n, rval);
        }
        Num(nn) : compare(comparisonOp, n, nn);
        default : false;
      }
    }
    default : false;  
  }

  if (comparisonResult) {
    execCommand(tru, env);
  } else {
    execCommand(fls, env);
  }
}

compare(comparisonOp: string, lval: int, rval: int) -> bool {
  if (comparisonOp == "<") {
    lval < rval;
  } else {
    if (comparisonOp == ">") {
      lval > rval;
    } else {
      if (comparisonOp == "==") {
        lval == rval;
      } else {
        if (comparisonOp == "!=") {
          lval != rval;
        } else {
          if (comparisonOp == "<=") {
            lval <= rval;
          } else {
            lval >= rval;
          }
        }
      }
    }
  }
}

add(e1: Exp, e2: Exp, env: Env) -> int {
  switch (e1 : Exp) {
    Id(i) : {
      ival  = getVal(lookupTree(env.kvDB, i));
      switch (e2 : Exp) {
        Id(ii) : {             
          iival = getVal(lookupTree(env.kvDB, ii));
          ival + iival;
        } 
        Num(nn) : {
          ival + nn;      
        }
        Neg(nn) : {
          ival + neg(nn, env);
        }
        default : -intMax;  
      }      
    }
    Num(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          n + iival;
        }
        Num(nn) : n + nn;
        Neg(nn) : n + neg(nn, env);
        default : -intMax;
      }
    }
    Neg(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          neg(n, env) + iival;
        }
        Num(nn) : neg(n, env) + nn;
        Neg(nn) : neg(n, env) + neg(nn, env);
        default : -intMax;
      }    
    }
    default : -intMax;
  }
}

sub(e1: Exp, e2: Exp, env: Env) -> int {
  switch (e1 : Exp) {
    Id(i) : {
      ival  = getVal(lookupTree(env.kvDB, i));
      switch (e2 : Exp) {
        Id(ii) : {             
          iival = getVal(lookupTree(env.kvDB, ii));
          ival - iival;
        } 
        Num(nn) : ival - nn;      
        Neg(nn) : ival - neg(nn, env);
        default : -intMax;  
      }      
    }
    Num(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          n - iival;
        }
        Num(nn) : n - nn;
        Neg(nn) : n - neg(nn, env);
        default : -intMax;
      }
    }
    Neg(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          neg(n, env) - iival;
        }
        Num(nn) : neg(n, env) - nn;
        Neg(nn) : neg(n, env) - neg(nn, env);
        default : -intMax;
      }    
    }   
    default : -intMax;
  }
}

mul(e1: Exp, e2: Exp, env: Env) -> int {
  switch (e1 : Exp) {
    Id(i) : {
      ival  = getVal(lookupTree(env.kvDB, i));
      switch (e2 : Exp) {
        Id(ii) : {             
          iival = getVal(lookupTree(env.kvDB, ii));
          ival * iival;
        } 
        Num(nn) : ival * nn;  
        Neg(nn) : ival * neg(nn, env);    
        default : -intMax;  
      }      
    }
    Num(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          n * iival;
        }
        Num(nn) : n * nn;
        Neg(nn) : n * neg(nn, env);
        default : -intMax;
      }
    }
    Neg(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          neg(n, env) * iival;
        }
        Num(nn) : neg(n, env) * nn;
        Neg(nn) : neg(n, env) * neg(nn, env);
        default : -intMax;
      }    
    }
    default : -intMax;
  }
}

div(e1: Exp, e2: Exp, env: Env) -> int {
  switch (e1 : Exp) {
    Id(i) : {
      ival  = getVal(lookupTree(env.kvDB, i));
      switch (e2 : Exp) {
        Id(ii) : {             
          iival = getVal(lookupTree(env.kvDB, ii));
          ival / iival;
        } 
        Num(nn) : ival / nn;   
        Neg(nn) : ival / neg(nn, env);   
        default : -intMax;  
      }      
    }
    Num(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          n / iival;
        }
        Num(nn) : n / nn;
        Neg(nn) : n / neg(nn, env);
        default : -intMax;
      }
    }
    Neg(n) : {
      switch (e2 : Exp) {
        Id(ii) : {
          iival = getVal(lookupTree(env.kvDB, ii));
          neg(n, env) / iival;
        }
        Num(nn) : neg(n, env) / nn;
        Neg(nn) : neg(n, env) / neg(nn, env);
        default : -intMax;
      }    
    }
    default : -intMax;
  }
}


// increment(l: String, r: Int, e: Env) -> Env {
//   val = getVal(lookupTree(e.db, l.strVal));
//   newVal = val + r.intVal;
//   updatedDB = setTree(e.db, l.strVal, newVal);
//   Env(tail(e.lines), updatedDB, e.startLineNum, e.endLineNum, e.step);
// }

// printVar(s: String, e: Env) -> Env {
//   mprintln("", lookupTree(e.db, s.strVal));
//   Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);
// }

// printVal(i: Int, e: Env) -> Env {
//   println(i.intVal);
//   Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);
// }

// goto(l: Int, e: Env) -> Env {
//   Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);
// }

// noOp(e: Env) -> Env {
//   Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);  
// }

// ifElse(c: Condition, t: Command, f: Command, e: Env) -> Env {
//   lhsVal = getVal(lookupTree(e.db, c.lhs.strVal));
//   condVal = if (c.op.strVal == "<") {
//     lhsVal < c.rhs.intVal;
//   } else {
//     if (c.op.strVal == ">") {
//       lhsVal > c.rhs.intVal;
//     } else {
//       lhsVal == c.rhs.intVal;
//     }
//   }
//   if (condVal) {
//     switch (t : Command) {
//       GoTo(n) : {            
//         Env(range(n.intVal, e.endLineNum, e.step), e.db, e.startLineNum, e.endLineNum, e.step);
//       }
//       PrintVal(n): printVal(n, e);
//       PrintVar(s) : printVar(s, e);
//       Increment(l, r) : increment(l, r, e);
//       Assignment(l, r) : assignment(l, r, e);
//       IfElse(co, ot, of): {
//         Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);
//       }
//       NoOp() : noOp(e);
//     }
//   } else {        
//     Env(tail(e.lines), e.db, e.startLineNum, e.endLineNum, e.step);
//   }
// }

while(condition : () -> bool, action : () -> void) -> void {
  if (condition()) {
    action();
    while(condition, action);
  };
}

range(start: int, end: int, step: int) -> [int] {
  i = ref start;
  arr = ref [];
  while(\ -> { ^i < end + step }, \ -> {
    arr := arrayPush(^arr, ^i);
    i := ^i + step;
  });
  ^arr;
}